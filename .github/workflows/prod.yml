name: Build, Test #and Deploy to Prod

# Trigger the workflow when changes are pushed to the main branch
on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Checkout code from the repository
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        path: ~/app-service-backend

    - name: Checkout frontend
      uses: actions/checkout@v4
      with:
        repository: ronin-code-io/app-service-frontend
        path: ~/app-service-front/
    
    - name: Copy asserts into backend
      working-directory: ~/
      run: |
        mv ~/app-service-front/asserts/* ~/app-service-backend/asserts/

      # Cache dependencies to speed up build times
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/app-service-backend/.cargo
          ~/app-service-backend/target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('Cargo.lock') }}
        restore-keys: ${{ runner.os }}-cargo-

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable

    - name: Build and test app-service code
      working-directory: ~/app-service-backend
      run: |
        cargo build --verbose
        cargo test --verbose

      # Set up Docker Buildx for multi-platform builds
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_ACCESS_TOKEN }}

    - name: Build and push Docker images
      uses: docker/bake-action@v2.3.0
      with:
        push: true
        workdir: ~/app-service-backend
        files: |
          compose.yml
          compose.override.yml
        set: |
          *.cache-from=type=gha
          *.cache-to=type=gha,mode=max

  # deploy:
  #   needs: build
  #   runs-on: ubuntu-latest

  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v2

  #   - name: Log in to Docker Hub
  #     uses: docker/login-action@v1
  #     with:
  #       username: ${{ secrets.DOCKER_USERNAME }}
  #       password: ${{ secrets.DOCKER_ACCESS_TOKEN }}

  #   - name: Install sshpass
  #     run: sudo apt-get install sshpass

  #   - name: Copy compose.yml to droplet
  #     run: sshpass -v -p '${{ secrets.DROPLET_PASSWORD }}' scp -o StrictHostKeyChecking=no compose.yml root@${{ vars.DROPLET_IP }}:~/${{ env.APP_NAME }}

  #   - name: Deploy
  #     uses: appleboy/ssh-action@master
  #     with:
  #       host: ${{ vars.DROPLET_IP }}
  #       username: root
  #       password: ${{ secrets.DROPLET_PASSWORD }}
  #       script: |
  #         cd ~/${{ env.APP_NAME }}
  #         docker network inspect ${{ env.DOCKER_NETWORK_NAME }} >/dev/null 2>&1 || docker network create --driver bridge ${{ env.DOCKER_NETWORK_NAME }}
  #         export AUTH_SERVICE_HOST='${{ vars.DROPLET_IP }}/auth'
  #         docker compose down
  #         docker compose pull
  #         docker compose up -d
